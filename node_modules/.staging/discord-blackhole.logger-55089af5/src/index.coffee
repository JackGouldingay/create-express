# Dependencies
chalk = require "chalk"
path = require "path"
mkdirp = require "mkdirp-sync"
fs = require "fs"

###*
# This is the logger used in the Blackhole Discord Bot.
###
class Logger
	
	###*
	# The offset in milliseconds.
	# @type {number}
	###
	offset: 0
	
	###*
	# Write to file if this is a string.
	# @type {?string}
	###
	writeToFile: null
	
	###*
	# The write method
	# @type {boolean}
	###
	writeSync: false
	
	###*
	# An object containing type names.
	# @type {object}
	# @property {string} log The type name for default messages.
	# @property {string} debug The type name for debugging.
	# @property {string} info The type name for info messages.
	# @property {string} alert The type name for alert messages.
	# @property {string} success The type name for success messages.
	# @property {string} warning The type name for warning messages.
	# @property {string} error The type name for error messages.
	###
	typ:
		log:     "       "
		debug:   "  DEBUG"
		info:    "   INFO"
		alert:   "  ALERT"
		success: "SUCCESS"
		warning: "WARNING"
		error:   "  ERROR"
	
	###*
	# This is the color theme for the project.
	# @type {object}
	# @property {function} default The color for default messages.
	# @property {function} debug The color for debugging.
	# @property {function} info The color for info messages.
	# @property {function} alert The color for alert messages.
	# @property {function} success The color for success messages.
	# @property {function} warning The color for warning messages.
	# @property {function} error The color for error messages.
	# @property {function} time The color for time numbers.
	# @property {function} split The color for time spilts.
	###
	theme:
		default: chalk.reset
		debug: chalk.gray
		info: chalk.blue
		alert: chalk.cyan
		success: chalk.green
		warning: chalk.yellow
		error: chalk.red
		time: chalk.magenta
		split: chalk.gray
	
	###*
	# This is the format to display.
	# @type {string}
	###
	format: "{year}/{month}/{date} {hour}:{minute}:{second} {millisecond}"
	
	###*
	# Log type names to the terminal?
	# @type {boolean}
	###
	logTypes: false
	
	###*
	# Containing all the month names.
	# @type {MonthNamesArray}
	###
	monthNames: [ "January", "Frebruary", "March", "April", "May", "June", "July", "August", "October", "September", "November", "December" ]
	
	###*
	# Containing all the short month names.
	# @type {MonthNamesShortArray}
	###
	monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	
	###*
	# Containing all the lowercased month names.
	# @type {MonthNamesArray}
	###
	monthNamesLowercased: @.prototype.monthNames.map (i) -> do i.toLowerCase
	
	###*
	# Containing all the lowercased short month names.
	# @type {MonthNamesShortArray}
	###
	monthNamesShortLowercased: @.prototype.monthNamesShort.map (i) -> do i.toLowerCase
	
	###*
	# Containing all the names of week days.
	# @type {DayNamesArray}
	###
	dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
	
	###*
	# Containing all the short names of week days.
	# @type {DayNamesShortArray}
	###
	dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]
	
	###*
	# Containing all the lowercased names of the week.
	# @type {DayNamesArray}
	###
	dayNamesLowercased: @.prototype.dayNames.map (i) -> do i.toLowerCase
	
	###*
	# Containing all the lowecased short names of the week.
	# @type {DayNamesShortArray}
	###
	dayNamesShortLowercased: @.prototype.dayNamesShort.map (i) -> do i.toLowerCase
	
	###*
	# Format a string into a time string.
	# @param {string} str The string to format.
	# @return {string}
	###
	form: (time) ->
		Time = do @getTimeObject
		time = time.split("{" + key + "}").join(value) for key, value of Time
		time
	
	###*
	# Format a string into a time string, with color.
	# @param {string} str The string to format.
	# @return {string}
	###
	formColor: (time) ->
		Time = do @getColoredTimeObject
		time = time.split("{" + key + "}").join(value) for key, value of Time
		time = @theme.split time
		time
	
	###*
	# Enable log writing. Write data to files.
	# @param {string} [filename=`logs/${year}${month}${date}${hour}${minute}${second}.log`] The file path to write logs to.
	###
	logs: (p = null, sync = null) ->
		if typeof p isnt "string" or typeof p is "string" and not do p.trim
			p = @form "logs/{year}{month}{date}{hour}{minute}{second}.log`"
		
		if typeof sync isnt "boolean"
			sync = @writeSync
		
		@writeToFile = p
		@writeSync = sync
	
	###*
	# Append content to log file.
	# @param {Array<string>}
	###
	append: (type, args) ->
		# Make sure that logging is enabled.
		return if typeof @writeToFile isnt "string" or typeof @writeToFile is "string" and not do @writeToFile.trim
		mkdirp(path.dirname(path.resolve(@writeToFile))) unless fs.existsSync path.dirname(path.resolve(@writeToFile))
		fs.writeFileSync(path.resolve(@writeToFile), "") unless fs.existsSync @writeToFile
		fs.appendFileSync(path.resolve(@writeToFile), @form(@format) + " " + @typ[type] + " " + args.join(" ") + "\n");
	
	###
	# Replaces the console (logging tools) with Blackhole's Logger.
	###
	replaceConsole: () ->
		cLog = console.log
		cInfo = console.info
		cError = console.error
		cAlert = console.alert
		cDebug = console.debug
		cWarn = console.warn
		self = @
		console.log = () -> self.log(...([].slice.call(arguments)))
		console.debug = () -> self.debug(...([].slice.call(arguments)))
		console.info = () -> self.info(...([].slice.call(arguments)))
		console.alert = () -> self.alert(...([].slice.call(arguments)))
		console.warn = () -> self.warn(...([].slice.call(arguments)))
		console.warning = () -> self.warning(...([].slice.call(arguments)))
		console.error = () -> self.error(...([].slice.call(arguments)))
		console.success = () -> self.success(...([].slice.call(arguments)))
		console.reset = () =>
			delete console.log
			delete console.debug
			delete console.info
			delete console.alert
			delete console.warn
			delete console.warning
			delete console.error
			delete console.success
			delete console.reset
			console.log = cLog
			console.info = cInfo
			console.error = cError
			console.alert = cAlert
			console.debug = cDebug
			console.warn = cWarn
	
	###*
	# Turn any number lower than 10 into 'XX'.
	# @param {number} n The number.
	# @returns {string}
	###
	pad: (n) -> if n < 10 then '0' + n else '' + n
	
	###*
	# Turn any number lower than 100 into `"XXX"`
	# @param {number} n The number.
	# @returns {string}
	###
	padms: (n) -> if n < 100 and n < 10 then '00' + n else if n < 100 and n >= 10 then '0' + n else '' + n
	
	###*
	# Get the current time to display in the terminal.
	# @returns {string}
	###
	time: () ->
		time = @format
		Time = do @getColoredTimeObject
		time = time.split("{" + key + "}").join(value) for key, value of Time
		time = @theme.split time
		time
	
	###*
	# Change how the date is displayed in the terminal.
	#
	# The available variables are:
	# * year
	# * month
	# * monthName
	# * monthNameLowercased
	# * monthNameShort
	# * monthNameShortLowercasesd
	# * date
	# * day
	# * dayName
	# * dayNameLowercased
	# * dayNameShort
	# * dayNameShortLowercased
	# * hour
	# * minute
	# * second
	# * millisecond
	#
	# You call them by putting `{` before the variable and `}` after the variable.
	#
	# @param {string} [format="{year}/{month}/{date} {hour}:{minute}:{second} {millisecond}"] The format.
	# @returns {Logger}
	###
	setFormat: (n = "{year}/{month}/{date} {hour}:{minute}:{second} {millisecond}") ->
		@format = n
		@
	
	###*
	# Get a full time object
	# @returns {object}
	# @property {string} year Current year, e.g. 2018
	# @property {string} month Current month, e.g. 6
	# @property {string} monthName Current month name, e.g. June
	# @property {string} monthNameLowercased Current month name lowercased, e.g. june
	# @property {string} monthNameShort current month short name, e.g. Jun
	# @property {string} monthNameShortLowercasesd Current month short name lowercased, e.g. jun
	# @property {string} date Current date, e.g. 3
	# @property {string} day Current day, e.g. 1
	# @property {string} dayName Current day name, e.g. Sunday
	# @property {string} dayNameLowercased, e.g. sunday
	# @property {string} dayNameShort, e.g. Sun
	# @property {string} dayNameShortLowercased, e.g. sun
	# @property {string} hour, e.g. 07
	# @property {string} minute, e.g. 30
	# @property {string} second, e.g. 15
	# @property {string} millisecond, e.g. 123
	###
	getTimeObject: () ->
		Time = new Date
		Time.setTime @offset + do Time.getTime
		return
			year: "" + do Time.getFullYear
			month: @pad 1 + do Time.getMonth
			monthName: @monthNames[do Time.getMonth]
			monthNameLowercased: @monthNamesLowercased[do Time.getMonth]
			monthNameShort: @monthNamesShort[do Time.getMonth]
			monthNameShortLowercased: @monthNamesShortLowercased[do Time.getMonth]
			date: @pad do Time.getDate
			day: @pad 1 + do Time.getDay
			dayName: @dayNames[do Time.getDay]
			dayNameLowercased: @dayNamesLowercased[do Time.getDay]
			dayNameShort: @dayNamesShort[do Time.getDay]
			dayNameShortLowercased: @dayNamesShortLowercased[do Time.getDay]
			hour: @pad do Time.getHours
			minute: @pad do Time.getMinutes
			second: @pad do Time.getSeconds
			millisecond: @padms do Time.getMilliseconds
	
	###*
	# Format a message.
	# @param {string} message The message
	# @param {function} color A function that adds color to the message.
	###
	formatMessage: (message, color) -> do @time + " " + color(message) + "\n"
	
	###*
	# Get a full time object
	# @returns {object}
	# @property {string} year Current year, e.g. 2018
	# @property {string} month Current month, e.g. 6
	# @property {string} monthName Current month name, e.g. June
	# @property {string} monthNameLowercased Current month name lowercased, e.g. june
	# @property {string} monthNameShort current month short name, e.g. Jun
	# @property {string} monthNameShortLowercasesd Current month short name lowercased, e.g. jun
	# @property {string} date Current date, e.g. 3
	# @property {string} day Current day, e.g. 1
	# @property {string} dayName Current day name, e.g. Sunday
	# @property {string} dayNameLowercased, e.g. sunday
	# @property {string} dayNameShort, e.g. Sun
	# @property {string} dayNameShortLowercased, e.g. sun
	# @property {string} hour, e.g. 07
	# @property {string} minute, e.g. 30
	# @property {string} second, e.g. 15
	# @property {string} millisecond, e.g. 123
	###
	getColoredTimeObject: () ->
		Time = do @getTimeObject
		Time[key] = @theme.time value for key, value of Time
		Time
	
	###*
	# Log a normal message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	log: () ->
		args = Array.prototype.slice.call arguments
		@append "log", args
		args.unshift @typ.log if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.default
		@
	
	###*
	# Log a debug message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	debug: () ->
		args = Array.prototype.slice.call arguments
		@append "debug", args
		args.unshift @typ.debug if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.debug
		@
	
	###*
	# Log an info message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	info: () ->
		args = Array.prototype.slice.call arguments
		@append "info", args
		args.unshift @typ.info if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.info
		@
	
	###*
	# Log an alert message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	alert: () ->
		args = Array.prototype.slice.call arguments
		@append "alert", args
		args.unshift @typ.alert if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.alert
		@
	
	###*
	# Log a success message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	success: () ->
		args = Array.prototype.slice.call arguments
		@append "success", args
		args.unshift @typ.success if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.success
		@
	
	###*
	# Log a warning message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	warning: () ->
		args = Array.prototype.slice.call arguments
		@append "warning", args
		args.unshift @typ.warning if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.warning
		@
	
	###*
	# Log a warning message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	warn: () ->
		args = Array.prototype.slice.call arguments
		@append "warning", args
		args.unshift @typ.warning if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.warning
		@
	
	###*
	# Log an error message to the terminal.
	# @param {string} ...message The message
	# @returns {Logger}
	###
	error: () ->
		args = Array.prototype.slice.call arguments
		@append "error", args
		args.unshift @typ.error if @logTypes
		process.stdout.write @formatMessage args.join(" "), @theme.error
		@
	

###*
# All the month names.
#
# The array:
# - January
# - Frebruary
# - March
# - April
# - May
# - June
# - July
# - August
# - October
# - September
# - November
# - December
# @typedef MonthNamesArray
# @type {Array<string>}
###

###*
# All the short month names.
#
# The array:
# - Jan
# - Feb
# - Mar
# - Apr
# - May
# - Jun
# - Jul
# - Aug
# - Sep
# - Oct
# - Nov
# - Dec
# @typedef MonthNamesShortArray
# @type {Array<string>}
###

###*
# All the day names.
#
# The array:
# - Monday
# - Tuesday
# - Wednesday
# - Thursday
# - Friday
# - Saturday
# - Sunday
# @typedef DayNamesArray
# @type {Array<string>}
###

###*
# All the day names.
#
# The array:
# - Mon
# - Tue
# - Wed
# - Thu
# - Fri
# - Sat
# - Sun
# @typedef DayNamesShortArray
# @type {Array<string>}
###

# Export
module.exports = new Logger
module.exports.class = Logger