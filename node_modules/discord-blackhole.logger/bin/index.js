// Generated by CoffeeScript 2.3.1
(function() {
  // Dependencies
  /**
   * This is the logger used in the Blackhole Discord Bot.
   */
  var Logger, chalk, fs, mkdirp, path;

  chalk = require("chalk");

  path = require("path");

  mkdirp = require("mkdirp-sync");

  fs = require("fs");

  Logger = (function() {
    class Logger {
      /**
       * Format a string into a time string.
       * @param {string} str The string to format.
       * @return {string}
       */
      form(time) {
        var Time, key, value;
        Time = this.getTimeObject();
        for (key in Time) {
          value = Time[key];
          time = time.split("{" + key + "}").join(value);
        }
        return time;
      }

      /**
       * Format a string into a time string, with color.
       * @param {string} str The string to format.
       * @return {string}
       */
      formColor(time) {
        var Time, key, value;
        Time = this.getColoredTimeObject();
        for (key in Time) {
          value = Time[key];
          time = time.split("{" + key + "}").join(value);
        }
        time = this.theme.split(time);
        return time;
      }

      /**
       * Enable log writing. Write data to files.
       * @param {string} [filename=`logs/${year}${month}${date}${hour}${minute}${second}.log`] The file path to write logs to.
       */
      logs(p = null, sync = null) {
        if (typeof p !== "string" || typeof p === "string" && !p.trim()) {
          p = this.form("logs/{year}{month}{date}{hour}{minute}{second}.log`");
        }
        if (typeof sync !== "boolean") {
          sync = this.writeSync;
        }
        this.writeToFile = p;
        return this.writeSync = sync;
      }

      /**
       * Append content to log file.
       * @param {Array<string>}
       */
      append(type, args) {
        // Make sure that logging is enabled.
        if (typeof this.writeToFile !== "string" || typeof this.writeToFile === "string" && !this.writeToFile.trim()) {
          return;
        }
        if (!fs.existsSync(path.dirname(path.resolve(this.writeToFile)))) {
          mkdirp(path.dirname(path.resolve(this.writeToFile)));
        }
        if (!fs.existsSync(this.writeToFile)) {
          fs.writeFileSync(path.resolve(this.writeToFile), "");
        }
        return fs.appendFileSync(path.resolve(this.writeToFile), this.form(this.format) + " " + this.typ[type] + " " + args.join(" ") + "\n");
      }

      replaceConsole() {
        var cAlert, cDebug, cError, cInfo, cLog, cWarn, self;
        cLog = console.log;
        cInfo = console.info;
        cError = console.error;
        cAlert = console.alert;
        cDebug = console.debug;
        cWarn = console.warn;
        self = this;
        console.log = function() {
          return self.log(...([].slice.call(arguments)));
        };
        console.debug = function() {
          return self.debug(...([].slice.call(arguments)));
        };
        console.info = function() {
          return self.info(...([].slice.call(arguments)));
        };
        console.alert = function() {
          return self.alert(...([].slice.call(arguments)));
        };
        console.warn = function() {
          return self.warn(...([].slice.call(arguments)));
        };
        console.warning = function() {
          return self.warning(...([].slice.call(arguments)));
        };
        console.error = function() {
          return self.error(...([].slice.call(arguments)));
        };
        console.success = function() {
          return self.success(...([].slice.call(arguments)));
        };
        return console.reset = () => {
          delete console.log;
          delete console.debug;
          delete console.info;
          delete console.alert;
          delete console.warn;
          delete console.warning;
          delete console.error;
          delete console.success;
          delete console.reset;
          console.log = cLog;
          console.info = cInfo;
          console.error = cError;
          console.alert = cAlert;
          console.debug = cDebug;
          return console.warn = cWarn;
        };
      }

      /**
       * Turn any number lower than 10 into 'XX'.
       * @param {number} n The number.
       * @returns {string}
       */
      pad(n) {
        if (n < 10) {
          return '0' + n;
        } else {
          return '' + n;
        }
      }

      /**
       * Turn any number lower than 100 into `"XXX"`
       * @param {number} n The number.
       * @returns {string}
       */
      padms(n) {
        if (n < 100 && n < 10) {
          return '00' + n;
        } else if (n < 100 && n >= 10) {
          return '0' + n;
        } else {
          return '' + n;
        }
      }

      /**
       * Get the current time to display in the terminal.
       * @returns {string}
       */
      time() {
        var Time, key, time, value;
        time = this.format;
        Time = this.getColoredTimeObject();
        for (key in Time) {
          value = Time[key];
          time = time.split("{" + key + "}").join(value);
        }
        time = this.theme.split(time);
        return time;
      }

      /**
       * Change how the date is displayed in the terminal.
       *
       * The available variables are:
       * * year
       * * month
       * * monthName
       * * monthNameLowercased
       * * monthNameShort
       * * monthNameShortLowercasesd
       * * date
       * * day
       * * dayName
       * * dayNameLowercased
       * * dayNameShort
       * * dayNameShortLowercased
       * * hour
       * * minute
       * * second
       * * millisecond
       *
       * You call them by putting `{` before the variable and `}` after the variable.
       *
       * @param {string} [format="{year}/{month}/{date} {hour}:{minute}:{second} {millisecond}"] The format.
       * @returns {Logger}
       */
      setFormat(n = "{year}/{month}/{date} {hour}:{minute}:{second} {millisecond}") {
        this.format = n;
        return this;
      }

      /**
       * Get a full time object
       * @returns {object}
       * @property {string} year Current year, e.g. 2018
       * @property {string} month Current month, e.g. 6
       * @property {string} monthName Current month name, e.g. June
       * @property {string} monthNameLowercased Current month name lowercased, e.g. june
       * @property {string} monthNameShort current month short name, e.g. Jun
       * @property {string} monthNameShortLowercasesd Current month short name lowercased, e.g. jun
       * @property {string} date Current date, e.g. 3
       * @property {string} day Current day, e.g. 1
       * @property {string} dayName Current day name, e.g. Sunday
       * @property {string} dayNameLowercased, e.g. sunday
       * @property {string} dayNameShort, e.g. Sun
       * @property {string} dayNameShortLowercased, e.g. sun
       * @property {string} hour, e.g. 07
       * @property {string} minute, e.g. 30
       * @property {string} second, e.g. 15
       * @property {string} millisecond, e.g. 123
       */
      getTimeObject() {
        var Time;
        Time = new Date;
        Time.setTime(this.offset + Time.getTime());
        return {
          year: "" + Time.getFullYear(),
          month: this.pad(1 + Time.getMonth()),
          monthName: this.monthNames[Time.getMonth()],
          monthNameLowercased: this.monthNamesLowercased[Time.getMonth()],
          monthNameShort: this.monthNamesShort[Time.getMonth()],
          monthNameShortLowercased: this.monthNamesShortLowercased[Time.getMonth()],
          date: this.pad(Time.getDate()),
          day: this.pad(1 + Time.getDay()),
          dayName: this.dayNames[Time.getDay()],
          dayNameLowercased: this.dayNamesLowercased[Time.getDay()],
          dayNameShort: this.dayNamesShort[Time.getDay()],
          dayNameShortLowercased: this.dayNamesShortLowercased[Time.getDay()],
          hour: this.pad(Time.getHours()),
          minute: this.pad(Time.getMinutes()),
          second: this.pad(Time.getSeconds()),
          millisecond: this.padms(Time.getMilliseconds())
        };
      }

      /**
       * Format a message.
       * @param {string} message The message
       * @param {function} color A function that adds color to the message.
       */
      formatMessage(message, color) {
        return this.time() + " " + color(message) + "\n";
      }

      /**
       * Get a full time object
       * @returns {object}
       * @property {string} year Current year, e.g. 2018
       * @property {string} month Current month, e.g. 6
       * @property {string} monthName Current month name, e.g. June
       * @property {string} monthNameLowercased Current month name lowercased, e.g. june
       * @property {string} monthNameShort current month short name, e.g. Jun
       * @property {string} monthNameShortLowercasesd Current month short name lowercased, e.g. jun
       * @property {string} date Current date, e.g. 3
       * @property {string} day Current day, e.g. 1
       * @property {string} dayName Current day name, e.g. Sunday
       * @property {string} dayNameLowercased, e.g. sunday
       * @property {string} dayNameShort, e.g. Sun
       * @property {string} dayNameShortLowercased, e.g. sun
       * @property {string} hour, e.g. 07
       * @property {string} minute, e.g. 30
       * @property {string} second, e.g. 15
       * @property {string} millisecond, e.g. 123
       */
      getColoredTimeObject() {
        var Time, key, value;
        Time = this.getTimeObject();
        for (key in Time) {
          value = Time[key];
          Time[key] = this.theme.time(value);
        }
        return Time;
      }

      /**
       * Log a normal message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      log() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("log", args);
        if (this.logTypes) {
          args.unshift(this.typ.log);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.default));
        return this;
      }

      /**
       * Log a debug message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      debug() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("debug", args);
        if (this.logTypes) {
          args.unshift(this.typ.debug);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.debug));
        return this;
      }

      /**
       * Log an info message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      info() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("info", args);
        if (this.logTypes) {
          args.unshift(this.typ.info);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.info));
        return this;
      }

      /**
       * Log an alert message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      alert() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("alert", args);
        if (this.logTypes) {
          args.unshift(this.typ.alert);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.alert));
        return this;
      }

      /**
       * Log a success message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      success() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("success", args);
        if (this.logTypes) {
          args.unshift(this.typ.success);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.success));
        return this;
      }

      /**
       * Log a warning message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      warning() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("warning", args);
        if (this.logTypes) {
          args.unshift(this.typ.warning);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.warning));
        return this;
      }

      /**
       * Log a warning message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      warn() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("warning", args);
        if (this.logTypes) {
          args.unshift(this.typ.warning);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.warning));
        return this;
      }

      /**
       * Log an error message to the terminal.
       * @param {string} ...message The message
       * @returns {Logger}
       */
      error() {
        var args;
        args = Array.prototype.slice.call(arguments);
        this.append("error", args);
        if (this.logTypes) {
          args.unshift(this.typ.error);
        }
        process.stdout.write(this.formatMessage(args.join(" "), this.theme.error));
        return this;
      }

    };

    /**
     * The offset in milliseconds.
     * @type {number}
     */
    Logger.prototype.offset = 0;

    /**
     * Write to file if this is a string.
     * @type {?string}
     */
    Logger.prototype.writeToFile = null;

    /**
     * The write method
     * @type {boolean}
     */
    Logger.prototype.writeSync = false;

    /**
     * An object containing type names.
     * @type {object}
     * @property {string} log The type name for default messages.
     * @property {string} debug The type name for debugging.
     * @property {string} info The type name for info messages.
     * @property {string} alert The type name for alert messages.
     * @property {string} success The type name for success messages.
     * @property {string} warning The type name for warning messages.
     * @property {string} error The type name for error messages.
     */
    Logger.prototype.typ = {
      log: "       ",
      debug: "  DEBUG",
      info: "   INFO",
      alert: "  ALERT",
      success: "SUCCESS",
      warning: "WARNING",
      error: "  ERROR"
    };

    /**
     * This is the color theme for the project.
     * @type {object}
     * @property {function} default The color for default messages.
     * @property {function} debug The color for debugging.
     * @property {function} info The color for info messages.
     * @property {function} alert The color for alert messages.
     * @property {function} success The color for success messages.
     * @property {function} warning The color for warning messages.
     * @property {function} error The color for error messages.
     * @property {function} time The color for time numbers.
     * @property {function} split The color for time spilts.
     */
    Logger.prototype.theme = {
      default: chalk.reset,
      debug: chalk.gray,
      info: chalk.blue,
      alert: chalk.cyan,
      success: chalk.green,
      warning: chalk.yellow,
      error: chalk.red,
      time: chalk.magenta,
      split: chalk.gray
    };

    /**
     * This is the format to display.
     * @type {string}
     */
    Logger.prototype.format = "{year}/{month}/{date} {hour}:{minute}:{second} {millisecond}";

    /**
     * Log type names to the terminal?
     * @type {boolean}
     */
    Logger.prototype.logTypes = false;

    /**
     * Containing all the month names.
     * @type {MonthNamesArray}
     */
    Logger.prototype.monthNames = ["January", "Frebruary", "March", "April", "May", "June", "July", "August", "October", "September", "November", "December"];

    /**
     * Containing all the short month names.
     * @type {MonthNamesShortArray}
     */
    Logger.prototype.monthNamesShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    /**
     * Containing all the lowercased month names.
     * @type {MonthNamesArray}
     */
    Logger.prototype.monthNamesLowercased = Logger.prototype.monthNames.map(function(i) {
      return i.toLowerCase();
    });

    /**
     * Containing all the lowercased short month names.
     * @type {MonthNamesShortArray}
     */
    Logger.prototype.monthNamesShortLowercased = Logger.prototype.monthNamesShort.map(function(i) {
      return i.toLowerCase();
    });

    /**
     * Containing all the names of week days.
     * @type {DayNamesArray}
     */
    Logger.prototype.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    /**
     * Containing all the short names of week days.
     * @type {DayNamesShortArray}
     */
    Logger.prototype.dayNamesShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

    /**
     * Containing all the lowercased names of the week.
     * @type {DayNamesArray}
     */
    Logger.prototype.dayNamesLowercased = Logger.prototype.dayNames.map(function(i) {
      return i.toLowerCase();
    });

    /**
     * Containing all the lowecased short names of the week.
     * @type {DayNamesShortArray}
     */
    Logger.prototype.dayNamesShortLowercased = Logger.prototype.dayNamesShort.map(function(i) {
      return i.toLowerCase();
    });

    return Logger;

  }).call(this);

  /**
   * All the month names.
   *
   * The array:
   * - January
   * - Frebruary
   * - March
   * - April
   * - May
   * - June
   * - July
   * - August
   * - October
   * - September
   * - November
   * - December
   * @typedef MonthNamesArray
   * @type {Array<string>}
   */
  /**
   * All the short month names.
   *
   * The array:
   * - Jan
   * - Feb
   * - Mar
   * - Apr
   * - May
   * - Jun
   * - Jul
   * - Aug
   * - Sep
   * - Oct
   * - Nov
   * - Dec
   * @typedef MonthNamesShortArray
   * @type {Array<string>}
   */
  /**
   * All the day names.
   *
   * The array:
   * - Monday
   * - Tuesday
   * - Wednesday
   * - Thursday
   * - Friday
   * - Saturday
   * - Sunday
   * @typedef DayNamesArray
   * @type {Array<string>}
   */
  /**
   * All the day names.
   *
   * The array:
   * - Mon
   * - Tue
   * - Wed
   * - Thu
   * - Fri
   * - Sat
   * - Sun
   * @typedef DayNamesShortArray
   * @type {Array<string>}
   */
  // Export
  module.exports = new Logger;

  module.exports.class = Logger;

}).call(this);
